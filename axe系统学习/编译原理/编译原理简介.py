'''
先实现lisp语法的解释器(以后你可以拿这个金手指找别人约架...)
把它编译成一个栈式虚拟机代码
转换到汇编或者直接用虚拟机跑就随意了
'''

# 编译程序
'''
源程序-》词法-》语法（ast语法抽象树）-》中间语言（自己的汇编语法）-》汇编 -》 目标代码
'''
# 翻译程序
'''
源语言 -》 翻译程序 -》 目标语言
'''
# 编译过程
# （词法分析，语法分析，语义分析和中间代码产生， 优化， 目标代码生成）
'''
词法分析：输入源程序，对构成源程序的字符串进行扫描和分解，
识别出一个个单词（定义符、标识符、运算符、界符、常数）。

语法分析: 语法分析的任务是：在词法分析的基础上，根据语言的语法规则，
把单词符号串分解成各类语法单元（语法范畴）（短语、子句、句子、程序段、程序），
并确定整个输入串是否构成语法上正确的程序。

语义分析和中间代码的产生: 
对语法分析所识别出的各类语法范畴，分析其含义，并进行初步翻译（产生中间代码）。
这一阶段通常包含两个方面的工作。
(
1. 对每种语法范畴进行静态语义的检查，例如，变量是否定义、类型是否正确等等。 
2. 如果语义正确则进行中间代码的翻译。）

优化: 对于代码（主要是中间代码）进行加工变换，以期能够产生更为高效（省时间和空间）的目标代码　。

目标代码生成: 这一阶段的任务是把中间代码（经过优化处理之后的）
变换成特定机器上的低级语言代码（绝对指令、可重定位指令、汇编指令)
'''
# 编译程序的结构
# （编译程序总框，表格与表格管理，出错处理，遍，编译的前端与后端）
'''
表格与表格的管理: 编译程序在工作过程中需要保持一系列的表格，
以登记源程序的各类信息和编译各阶段的进展状况。 
最重要的是符号表，用来等级源程序中出现的每个名字以及名字的各种属性。
例如，一个名字是常量名还是变量名，还是过程名；如果是变量名，类型是什么，
占多大内存，地址是多少等等

出错处理: 如果源程序有错误，编译程序应设法发现错误，并把有关错误的信息报告给用户。

遍: 是对源程序或源程序的中间结果从头到尾扫描一次，并作有关的加工处理，
生成新的中间结果或目标程序。

编译前端:
前端主要由源语言有关但与目标机无关的那些部分组成，通常包括词法分析、语法分析、语义分析与中间代码的产生
，有的代码优化工作也可以包括在前端。

编译后端:
后端包括编译程序中与目标机有关的那些部分，如与目标机有关的代码优化和目标代码生成等。 
通常后端不依赖源语言而仅仅依赖于中间语言。
'''
# 编译程序产生
# （编译程序构造工具，T型图，用高级语言L1构造编译程序，编译程序移植，自编译方式，构造工具）
'''

'''

