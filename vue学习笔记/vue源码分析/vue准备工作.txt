认识 Flow
有时候我们想引用第三方库，或者自定义一些类型，但 Flow 并不认识，因此检查的时候会报错。为了解决这类问题，Flow 提出了一个 libdef 的概念，可以用来识别这些第三方库或者是自定义类型，而 Vue.js 也利用了这一特性。
在 Vue.js 的主目录下有 .flowconfig 文件， 它是 Flow 的配置文件，感兴趣的同学可以看官方文档。这其中的 [libs] 部分用来描述包含指定库定义的目录，默认是名为 flow-typed 的目录。
  compiler.js # 编译相关
  component.js # 组件数据结构
  global-api.js # global api结构
  modules.js # 第三方库定义
  options.js # 选项相关
  ssr.js # 服务端渲染相关
  vnodejs # 虚拟node相关

源码src目录
    compiler # 编译相关
    '''
    compiler 目录包含 Vue.js 所有编译相关的代码。
    它包括把模板解析成 ast 语法树，ast 语法树优化，代码生成等功能。
    '''
        - codegen
        - directives
        - parser
    core # 核心代码
    '''
    core 目录包含了 Vue.js 的核心代码，包括内置组件、全局 API 封装，
    Vue 实例化、观察者、虚拟 DOM、工具函数等等。
    '''
        - components
        global-api
        instance
        observer # 响应式相关
        vdom #
    platforms # 不同平台支持
    '''
    Vue.js 是一个跨平台的 MVVM 框架，它可以跑在 web 上，也可以配合 weex 跑在 natvie 客户端上。
    platform 是 Vue.js 的入口，2 个目录代表 2 个主要入口，分别打包成运行在 web 上和 weex 上的 Vue.js。
    '''
        -web
        -weex react native
    server # 服务端渲染相关
    '''
    服务端渲染主要的工作是把组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将静态标记"混合"为客户端上完全交互的应用程序。
    '''
    sfc # 解释器(vue->js对象)
    '''
    这个目录下的代码逻辑会把 .vue 文件内容解析成一个 JavaScript 的对象。
    '''
    shared # 工具函数
    '''
    Vue.js 会定义一些工具方法，这里定义的工具方法都是会被浏览器端的 Vue.js 和服务端的 Vue.js 所共享的。
    '''
数据驱动
  new vue 发生了什么
  vue实例挂载的实现
  render
  virtual dom
