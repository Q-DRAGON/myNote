# vue双向绑定原理及实现(实现mvvm主要包含两个方面，数据变化更新视图，视图变化更新数据)
数据劫持结合发布者-订阅者模式的方式来实现的
通过Object.defineProperty实现数据劫持

data更新view，就是通过Object.defineProperty( )对属性设置一个set函数，当数据改变了就会来触发这个函数，
view更新data其实可以通过事件监听即可，比如input标签监听 'input' 事件就可以实现了。


Observer.js : 用来监听所有属性。如果属性发上变化了，就需要告诉订阅者Watcher看是否需要更新。
watcher.js: 订阅者是有很多个，所以我们需要有一个消息订阅器Dep来专门收集这些订阅者，
然后在监听器Observer和订阅者Watcher之间进行统一管理的

Compile.js 对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者Watcher，
并替换模板数据或者绑定相应的函数，此时当订阅者Watcher接收到相应属性的变化，
就会执行对应的更新函数，从而更新视图。


流程：

1.实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。

2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。

3.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。

