<--  DOCTYPE 和 他的作用  -->
DTD(文档类型定义) => 用来描述 XML HTML 这些文档类型定义，就是判断我是哪一种文档类型
  浏览器根据这个来判断用什么去解析去渲染
DOCTYPE 用来声明文档类型和DTD的规范, 其实就是告诉浏览器我是那种DTD，然后渲染要根据规则，不然会报错

DOCTYPE的写法:
1. h5 的写法: <!DOCTYPE html>
2. 4.0 版本有一个严格模式有一个宽松模式
   => 严格模式包含所有的html元素和属性，但不包含展示性和弃用性的元素
   => 宽松模式包含所有的元素和属性， 包括展示性和弃用性的元素

<--  当输入一个网址后浏览器做了什么  -->
1. 首先浏览器会根据你的URL, 查看浏览器缓存=> 系统缓存 => 路由缓存中去找, 找到了执行6, 找到的话执行2
2. 浏览器根据输入的URL地址解析出主机名,然后转换成IP地址
3. 根据这个ip去本地DNS缓存中找, 如果没有就再向浏览器默认的DNS服务器发送查询请求，同时缓存当前这个ip到DNS缓存列表中
4. 浏览器解析出端口
5. 拿到ip和端口后, 浏览器会通过三次tcp握手与服务器建立TCP连接
6. 浏览器向服务器发送一条HTTP请求报文。
7. 服务器向浏览器返回一条HTTP响应报文。
8. 经过四次握手tcp客户端收到数据，做出响应，渲染页面
8. 关闭连接 浏览器解析文档。



<--  重排(Reflow) 重绘 (Repaint) -->
浏览器渲染HTML的步骤:
1. 将 html渲染成DOM 树，css 渲染成 css dom树
2. DOM Tree和CSSOM Tree解析完成后，被附加到一起，形成渲染树（Render Tree）。
3. 重排也就是 根据渲染树计算每个节点的几何属性
4. 渲染绘制(重绘)，这个过程被叫做(Painting 或者 Repaint)。即根据计算好的信息绘制整个页面。

重排重点介绍:
浏览器渲染页面默认采用的是流式布局模型（Flow Based Layout），这一点很重要。
所谓重排，实际上是根据渲染树中每个渲染对象的信息，
计算出各自渲染对象的几何信息（DOM对象的位置和尺寸大小），并将其安置在界面中的正确位置。
又因为渲染页面采用流式布局模型，所以一个dom 的结构啊 内容啊改变就需要重新计算,重新布局,
当然这个重新渲染也分为局部和整体, 整体就是从html跟标签开始, 局部的就是只改变了一个dom的字体大小这样

回流介绍:
重排其实就是回流, 只不过是因为我们是中国人叫重排更好理解
回流其实就是因为是流体布局，也就是文档流,就好比一条河
扔一个石子，激起波纹旁边的水流被波及

重绘介绍:
所谓重绘，就是当页面中元素样式的改变并不影响它在文档流中的位置时，
例如更改了字体颜色,浏览器会将新样式赋予给元素并重新绘制的过程称。

如何最大程度的降低重绘:  将多个节点通过使用创建createDocumentFragment的方式进行统一添加

<--   浏览器性能优化  -->
1. 减少DOM 操作,
因为dom操作会引起重排和重绘，同时DOM和js其实是在两个文件，每次都要建立连接
减少DOM 操作体现为
   =>   如果在一个局部方法中需要多次访问同一个dom，则先暂存它的引用
   =>   用querySelectorAll()替代getElementByXX()。
   =>   少用HTML集合（类数组）来遍历，因为集合遍历比真数组遍历耗费更高。
   =>    用事件委托来减少事件处理器的数量。
2. 减少重排
减少重排体现在:
   => 避免设置大量的style属性
   =>  实现元素的动画，它的position属性，最好是设为absoulte或fixed，这样不会影响其他元素的布局
  这点主要是体现在触发 BFC 机制上
   =>  不要使用table布局，因为table中某个元素旦触发了reflow，那么整个table的元素都会触发reflow。
   是在要用设置 table-layout:auto; 或者 table-layout:flex;
3. css及动画处理
css及动画处理体现在
   =>  少用css表达式
   =>  减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画

<--  提升页面性能的方法  -->
一. 资源压缩合并, 减少http的请求

二. 非核心代码异步加载
      1. 异步加载的方式
       =>  用 script 引入  =>  defer   => asyns
      2. 异步加载的区别
      => defer  是再html 解析完后才会执行, 如果是多个，就按顺序依次执行
      =>  asyns 是在加载完之后立即执行, 如果是多个执行顺序和加载顺序无关

三. 利用浏览器的缓存
     1. 缓存的分类
      强缓存 下次请求的时候如果不到过期时间就直接从本地磁盘中读取
      => Expiers  (过期时间)
      http响应头中携带的过期时间, 是服务端的绝对时间，但客户端和服务端的时间可能有差别，所以新增了Cache-Control
      => Cache-Control   (相对时间)  拿到请求后 3600秒以内不会再去请求服务器  直接从缓存中拿
      Cache-Control: max-age=3600
      如果两个都下发了， 以后者为准

      协商缓存
      =>   当请求时间超过了强缓存设置的时间之后，下次请求时不确定能不能用，就携带服务器下发的 lastmodified
      像服务器询问下是不是用缓存


     2. 缓存的原理

四. 使用cdn
 使用了很多js和css，让网络快速到达服务端将文件下载下来

五. dns预解析
如果是http协议开头的页面 a 标签是默认开启dns预解析的, 如果是https协议开头的页面 a 标签是默认关闭dns预解析的
就使用<meta http='x-dnc-prefetch-contorl'> 开启dns预解析
<link rel='dns-prefetch'>


<--  跨域问题  -->
协议 域名 和 端口
跨域只要针对的就是ajax, 因为ajax用的是http协议, 而我们平常请求数据都是要用ajax, 所以必然会被同源策略所限制
跨域的原因：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器施加的安全限制
同源策略：域名，端口， 协议相同，是指在百度的tab下只能运行和百度同源的脚本，如果不同源，
那么请求数据时会报异常，提示拒绝访问。
跨域：浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的限制。

跨域的解决方式:
所谓同源是指，域名，协议，端口均相同
1. JSONP的方式, 因为我们平常用的img script link 这些标签的src 和 href 属性是没有跨域的限制,
所以我们可以将文件已这样的形式引入进来
2. cors方式  因为我们从淘宝去请求京东的数据, 因为你的请求头都不一样, 所以受同源策略的限制,
可以后端设置一个请求头让你可以访问 orrige
3. nginx 配置解决
4. socket 解决跨域
5. postMessage解决  也就是使用h5 HTML5 XMLHttpRequest Level 2中的API
他接受两个参数, 一个是data(最好用JSON.stringify())进行序列化，
第二个参数就是要穿的ip地址 协议+主机+端口号

<--   错误监控   -->
一.     前端错误的分类
          即时运行错误(代码错误)    资源加载错误

二.    错误的捕获方式
        即时运行错误的捕获: 1. try...catch...     2. window.onerror
        资源加载错误:
       1. Object.onerror  => script img等上绑定onerror事件拦截错误
       2. Error 事件捕获  => 在window上绑定Error 事件，执行捕获
       3. performance.getEntries  => 用performance.getEntries方法去获取页面上已经加载成功的资源和总资源进行对比，缺少的就是加载失败的
       跨域文件的错误也可以捕获，但是只能捕获到script error信息，不能拿到具体信息
       解决方法就是客户端在 script 标签上设置 crossorigin


三.    上报错误的基本原理
      1. 使用ajax通信的方式上报
      2. 利用 image 对象上报
      写法  (new  image().src = url)





















