浏览器从加载到渲染的过程，比如输入一个网址到显示页面的过程。
加载过程：
浏览器根据 DNS 服务器解析得到域名的 IP 地址
向这个 IP 的机器发送 HTTP 请求 服务器收到、处理并返回 HTTP 请求
浏览器得到返回内容
渲染过程：

根据 HTML 结构生成 DOM 树
根据 CSS 生成 CSSOM
将 DOM 和 CSSOM 整合形成 RenderTree
根据 RenderTree 开始渲染和展示
遇到<script>时，会执行并阻塞渲染


浏览器缓存机制：
强制缓存：catch-control，expires，catch-control优先级高。
协商缓存：Last-Modified / If-Modified-Since和Etag / If-None-Match，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。

2.1 极简版的双向绑定
我们都知道,Object.defineProperty的作用就是劫持一个对象的属性,通常我们对属性的getter和setter方法进行劫持,在对象的属性发生变化时进行特定的操作。
我们就对对象obj的text属性进行劫持,在获取此属性的值时打印'get val',在更改属性值的时候对DOM进行操作,这就是一个极简的双向绑定。
const obj = {};
Object.defineProperty(obj, 'text', {
  get: function() {
    console.log('get val');
  },
  set: function(newVal) {
    console.log('set val:' + newVal);
    document.getElementById('input').value = newVal;
    document.getElementById('span').innerHTML = newVal;
  }
});

const input = document.getElementById('input');
input.addEventListener('keyup', function(e){
  obj.text = e.target.value;
})

2.2
是说如果让你自己做一个语义化的 地址信息 展示，你怎么组织html
html语义化就是让页面的内容结构化。
1.在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。
2.搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。
3.使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。
4.方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以有意义的方式来渲染网页；
5.便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。

js 中有几种数据类型?
Number/string/boolean/undefined/null/symbol

平时怎么判断基本类型：
Object.prototype.toString.call(obj)
这么写可以避免obj自己定义的tostring方法，而使用
Object这个原先定义的toString方法
var a = new Date()
a.toString()
Object.prototype.toString.call(a)

typeof 判断基础数据类型有什么问题:
除了 null 以外的数据类型可以

js 单线程与异步有什么关系
异步是浏览器提供的 api，做一个事件轮询，所以可以异步。
js 本身是单线程，不做异步会堵塞。
然后（不知道继续说什么）就说了宏任务和微任务。

JSX 实际上是什么？
一般需要用 babel 做一个转换，转换成 React.createElement
创建dom的方式：
document.createElement, React.createElement 与 JSX
const title = React.createElement("h1", {className: "main"}, "Hello React (method 2)");
三个参数：标签，属性，文本内容
类似于一个语法糖，最后还是转换，编译成对象这种格式，传入到 React 里，转换成虚拟 dom。
jsx是一种js的语法糖，关于所谓的高级的组件hoc,就是解决了过多的不必要的div。
原本写一个jsx的时候，jsx必须要封装的标签包裹。react实现了一个AUX
写法是这样的：
const Aux = props => props.children
const title = (
  <Aux>
    <h1></h1>
    <p></p>
  </Aux>
)
现在的话提供了一个fagment的方法，就是自带了<Aux>
格式如下：
const title = (
  <>
    <h1>Parallel elements demo</h1>
    <p>Content</p>
  </>
)

关于diff算法：
具体的对比过程
我：先对比父元素的类型，类型不一致就不做判断。
如果一致就判断属性，不一致就修改属性。
然后判断子元素，按照数组的顺序或者 key 去判断是否一致，不一致就重新渲染。
检测key值，发现都是0，判定组件为同一个；
检测item.name部分，发现有变化，重新渲染这部分；
const diff = (a, b) => {
    let tpa = typeof a
    let tpb = typeof b
    if(tpa === tpb) {
        if (tpa === "number") {
            return a === b ? true : false
        }
        if (tpb === 'object') {
            let arr_a = Object.entries(a)
            let arr_b = Object.entries(b)
            if (arr_a.length === arr_b.length) {
                for (let i = 0; i < arr_a.length; i++) {
                    let [k1, v1] = arr_a[i]
                    let [k2, v2] = arr_b[i]
                    if (k1 !== k2 || v1 !== v2) {
                        return false
                    }
                }
                return true
            } else {
                return false
            }
        }
    } else {
        return false
    }
}
