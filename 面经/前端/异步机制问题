// setTimeout(function() {
//     console.log(1);
// }, 100);
// setTimeout(function () {
//     console.log(2);
// }, 0)
// Promise.resolve(console.log(3)).then(() => { console.log(4) })
// async function async1(){
//     console.log(5)
//     await async2()
//     console.log(6)
// }
// async function async2(){
//     console.log(7)
// }
// async1()
// console.log(8)

/*
3 5 7 8 4 6 2 1
首先JavaScript是单线程的，主线程拥有一个执行栈以及一个任务队列。
所有主线程函数运行完毕以后再将一步函数出栈，知道所有异步函数执行完毕

因为promise， setTimeout 都是异步处理机制，
promise类似于 const guasync = (func) => {
    setTimeout(() => {
        func()
    }, 0)
} 同步的逻辑异步的效果，总之优先级比setTimeout高。
因为任务队列分为macrotasks和microtasks.
而promise中的then方法的函数会被推入到micotaks队列中，setTimeout函数
会被推入到macrotasks任务队列中。任务队列中，在每一次事件循环中，macrotasks
microtask会一直提取，直到microsoft队列为空为止。


一个promise有初始状态这个是同步执行的，然后fulfilled, reject这两个是异步执行的。
async function 声明用于定义一个返回 AsyncFunction 对象的异步函数。
async声明的函数会返回一个promise对象，即使是非promise对象，也会用promise.resolve包裹
await声明的语句，会等到该语句执行完，js才会执行下面的语句。
然后js是顺序执行的。
因此先输出3，然后执行async1()输出5，7
之后执行8， 然后执行栈pop任务到任务队列，先执行microtasks任务，输出4， 6
之后执行macrotasks任务输出2， 1
