添加代码使得如下代码每隔一秒输出一个数字
答案：for (var i = 0; i < 5; i++) {
    let j = i
    setTimeout(function () {
        console.log(j)
    }, 1000 * j)
}

写一个函数，对于一个排好序的数组，如果当中有两个数的和为某个给定的数target，返回true，否则false，时间复杂度O(n)
答案：const getResult = (arr, target) => {
    let i, j
    for (i = 0, j = arr.length - 1; i < j;) {
        log(arr[i] + arr[j], target)
        if (arr[i] + arr[j] === target) {
            return true
        } else if (arr[i] + arr[j] < target) {
            i++
        } else {
            j--
        }
    }
    return false
}

log('result', getResult([1, 2, 3, 4, 5], 5))

以下代码的执行结果是什么? 并解释原因
    setTimeout(function() {
    console.log(1);
    }, 100);
    setTimeout(function () {
    console.log(2);
    }, 0)
    Promise.resolve(console.log(3)).then(() => { console.log(4) })
    async function async1(){
    console.log(5)
    await async2()
    console.log(6)
    }
    async function async2(){
    console.log(7)
    }
    async1()
    console.log(8)
  答案：  /*
    3 5 7 8 4 6 2 1
    首先JavaScript是单线程的，主线程拥有一个执行栈以及一个任务队列。
    所有主线程函数运行完毕以后再将一步函数出栈，知道所有异步函数执行完毕

    因为promise， setTimeout 都是异步处理机制，
    promise类似于 const guasync = (func) => {
        setTimeout(() => {
            func()
        }, 0)
    } 同步的逻辑异步的效果，总之优先级比setTimeout高。
    因为任务队列分为macrotasks和microtasks.
    而promise中的then方法的函数会被推入到micotaks队列中，setTimeout函数
    会被推入到macrotasks任务队列中。任务队列中，在每一次事件循环中，macrotasks
    microtask会一直提取，直到microsoft队列为空为止。


    一个promise有初始状态这个是同步执行的，然后fulfilled, reject这两个是异步执行的。
    async function 声明用于定义一个返回 AsyncFunction 对象的异步函数。
    async声明的函数会返回一个promise对象，即使是非promise对象，也会用promise.resolve包裹
    await声明的语句，会等到该语句执行完，js才会执行下面的语句。
    然后js是顺序执行的。
    因此先输出3，然后执行async1()输出5，7
    之后执行8， 然后执行栈pop任务到任务队列，先执行microtasks任务，输出4， 6
    之后执行macrotasks任务输出2， 1
    */


    请根据面对对象编程的思想，设计一个类型 Cash 用于表达人民币，使得：
        class Cash {
        // todo
        　　}
        　　const cash1 = new Cash(105);
        　　const cash2 = new Cash(66);
        　　const cash3 = cash1.add(cash2);
        　　const cash4 = Cash.add(cash1, cash2);
        　　const cash5 = new Cash(cash1 + cash2);
        　　console.log(`${cash3}`, `${cash4}`, `${cash5}`);
答案：
        class Cash {
            constructor(value) {
                this.yuan = Math.floor(value / 100)
                this.jiao = Math.floor((value - this.yuan * 100) / 10)
                this.fen = Math.floor(value - this.yuan * 100 - this.jiao * 10)
            }

            add(val) {
                let yuan = this.yuan + val.yuan
                let jiao = this.jiao + val.jiao
                let fen = this.fen + val.fen
                let value = yuan * 100 + jiao * 10 + fen
                return new Cash(value)
            }

            static add(val1, val2) {
                let yuan = val1.yuan + val2.yuan
                let jiao = val1.jiao + val2.jiao
                let fen = val1.fen + val2.fen
                let value = yuan * 100 + jiao * 10 + fen
                return new Cash(value)
            }


            toString() {
                return `${this.yuan}元${this.jiao}角${this.fen}分`
            }

            valueOf() {
                return this.yuan * 100 + this.jiao * 10 + this.fen
            }
        }
        const cash1 = new Cash(105)
        const cash2 = new Cash(66)
        const cash3 = cash1.add(cash2)
        const cash4 = Cash.add(cash1, cash2)
        const cash5 = new Cash(cash1 + cash2)
        log(`${cash3}`, `${cash4}`, `${cash5}`)
        // 1元7角1分, 1元7角1分, 1元7角1分

实现一个EventEmitter类，这个类包含以下方法：
on（监听事件，该事件可以被触发多次）- once（也是监听事件，但只能被触发一次）
- fire（触发指定的事件）- off（移除指定事件的某个回调方法或者所有回调方法）

答案：
class EventEmitter {
    constructor() {
        this._events = {}
    }

    on(event, callback) {
        this._events[event] = callback
        return this
    }

    once(event, callback) {
        let wrap = (...args) => {
            callback.apply(this, args)
            this.off(event, wrap)
        }
        this.on(event, wrap)
    }

    off(event) {
        this._events[event] = null
        return this
    }

    fire(eventName, ...args) {
        let callback = this._events[eventName]
        if (callback) {
            callback(args)
        }
    }
}

const event = new EventEmitter()

event.on('drink', (person) => {
    console.log(person + '喝水')
})
event.on('eat', (person) => {
    console.log(person + '吃东西')
})
event.once('buy', (person) => {
    console.log(person + '买东西')
})

event.fire('drink', '我') // 我喝水
event.fire('drink', '我') // 我喝水
event.fire('eat', '其它人') // 其它人吃东西
event.fire('eat', '其它人') // 其它人吃东西
event.fire('buy', '其它人') //其它人买东西
event.fire('buy', '其它人') //这里不会再次触发buy事件，因为once只能触发一次
event.off('eat') //移除eat事件
event.fire('eat', '其它人') //这里不会触发eat事件，因为已经移除了
